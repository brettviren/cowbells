Cowbells simulation application.

* Overview

The Cowbells simulation is based on Geant4 and ROOT and used to
simulate detectors related to water-based liquid scintilator R&D.

The simulation takes its geometry, material and optical properties from
an input ROOT file and produces an output ROOT file containing TTrees.

* Geometry

The geometry is largely specified by the contents of a TGeoManager
object from the input file located in the default =geometry/=
location.

In addition the sensitive detectors must be specified.  FIXME: needs
work, currently must specify in the =cowbells.cc= main program.

* Material Properties

Material properties are specified as TGraphs.  The name of the TGraph
identifies the property name and the TGraph object should be located
in the input TFile in a TDirectory named like =properties/MATERIAL/=.
Scalar properties are TGraphs with a single entry.

** Scintillation Properties

The standard Geant4 =G4Scintillation= process is used.  The properties
it supports are:

 - =FASTCOMPONENT= :: the fast time component of the scintilation

 - =SLOWCOMPONENT= :: the slow time component of the scintilation

 - =xxxSCINTILLATIONYIELD= :: the per-particle scintillation yield
      (photons/MeV) for particle =xxx= if
      =SetScintillationByParticleType()= has been called.  The
      supported particles are =PROTON=, =DEUTERON=, =TRITON=, =ALHPA=,
      =ION=, =ELECTRON=.

 - =SCINTILLATIONYIELD= :: the scintillation yield (photons/MeV) for
      with no regards to particle type.

 - =RESOLUTIONSCALE= :: 

 - =FASTTIMECONSTANT= ::

 - =FASTSCINTILLATIONRISETIME= ::

 - =SLOWTIMECONSTANT= ::

 - =SLOWSCINTILLATIONRISETIME= ::

 - =YIELDRATIO= :: 


** Wavelength Shifting Properties

The standard Geant4 =G4OpWLS= process is used.  The properties it
supports are:

 - =WLSCOMPONENT= ::

 - =WLSMEANNUMBERPHOTONS= ::
 
 - =WLSTIMECONSTANT= :: 

 - =WLSABSLENGTH= ::



* Optical Surfaces

It is difficult to model the sample/Teflon boundary with just indices
of refraction.  Reflection off of Teflon is actually a bulk media
phenomenon (\cite{janecek}) that relies on scattering in to and out of
the Teflon material.  This means scattering and absorption in the bulk
contribute to an effective reflection.

To simplify this, the effective reflection is modeled with an optical
boundary.  In Geant4, there are two types of behavior at such a
boundary and one of two different models can be applied.  A boundary
is associated between an ordered pair of physical volumes (or a single
logical volume for a skin).

** Specifying optical surfaces

An optical surface is specified with a set of named scalar parameters
and vector properties.  The scalar parameters are in the form of
strings and the vector properties are numeric and as a function of
opticalphoton energy.  Which parameters and property apply depend on
the /type/ and /model/ of the surface.  Any parameter or property that
are not relevant to the specified type or model are ignored.

*** Scalar parameters

The scalar parameters are provided in a =std::map<string,string>=
which is saved to the ROOT file at =surfaces/SurfaceName/parameters=.
The allowed names and values are listed and follow the naming used by
Geant4.

All surfaces must be specified with:

 - =type= :: set the surface type, one of: =dielectric_metal=,
             =dielectric_dielectric=, (named same as =G4SurfaceType=
             enums).

 - =model= :: set the surface model, one of: =glisur=, =unified=,
              (named same as =G4OpticalSurfaceModel= enums).

 - =finish= :: set the surface finish, one of: =polished=, =ground=
               with an optional string appended: =frontpainted= or
               =backpainted=, (named same as
               =G4OpticalSurfaceFinish=).

 - =first= :: name of the first physical volume or name of the logical
              volume if a skin is to be used.

 - =second= :: name of the second volume.  If omitted a skin will be
               defined with the =first= volume

A single, optional and model-dependent parameter can be specified.  

 - =polish= :: The /polish/ parameter of the =glisur= model

 - =sigmaalpha= :: the \sigma_\alpha parameter of the =unified= model

*** Vector properties

Each vector property is provided as a named =TGraph= and is saved to
the ROOT file at =surfaces/SurfaceName/PropertyName=.  This name must
match the canonical name used by Geant4.  Some properties are
universal and some are only accepted by one of the models.

Universal properties

 - =RINDEX= :: index of refraction for =second= material.  Will be
               used if the material does not define its own
               =RINDEX=. Only used by =dielectric_dielectric=.

 - =REALRINDEX= and =IMAGINARYRINDEX= :: if =RINDEX= is not specified
      it will be calculated based on these real and imaginary parts,
      if provided.

 - =REFLECTIVITY= :: the probability to reflect at the boundary from the =first= volume.

 - =EFFICIENCY= :: unused (?)

 - =TRANSMITTANCE= :: the probability to transmit through the boundary
      from the =first= into the =second= volume.  Only used by
      =dielectric_dielectric=.

The Glisur model accepts no properties.

The Unified model accepts:

 - =SPECULARLOBECONSTANT= :: see Geant4 docs

 - =SPECULARSPIKECONSTANT= :: see Geant4 docs

 - =BACKSCATTERCONSTANT= :: see Geant4 docs


*** Model independent properties

#+begin_src c++
SMPT->AddProperty("REFLECTIVITY",pp,reflectivity,NUM);
SMPT->AddProperty("EFFICIENCY",pp,efficiency,NUM);
SMPT->AddProperty("RINDEX",pp,rindex,NUM); // for d_d, not d_m
#+end_src

*** Model dependent properties

These only matter when the =G4OpticalSurfaceFinish= specified is one
of the =ground*= enums.

**** Unified

Unified model approximates roughness as a distribution of normal
vectors w.r.t. nominal normal governed by a Gaussian distribution with
s.d. of =sigma_alpha= radians.

#+begin_src c++
SMPT->AddProperty("SPECULARLOBECONSTANT",pp,specularlobe,NUM);
SMPT->AddProperty("SPECULARSPIKECONSTANT",pp,specularspike,NUM);
SMPT->AddProperty("BACKSCATTERCONSTANT",pp,backscatter,NUM);
#+end_src

**** Glisur

Glisur model approximates roughness by adding a random vector to the
normal drawn from a spherical distribution of radius =1-polish= where
=polish= is the parameter of the model (polish<1.0).  A =polish= of 0
gies a =cos(angle)= distribution of normal vectors.






* Initial Kinematics

The initial kinematics of events to be simulated can be specified on
the command line with a kinematics URL.
