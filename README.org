#+TITLE: Cowbells simulation a simple but flexible Geant4-based detector simulation.
#+AUTHOR: Brett Viren
#+EMAIL: bv@bnl.gov

#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER:   hyperindex=true,
#+LATEX_HEADER:   plainpages=false,
#+LATEX_HEADER:   colorlinks=true,
#+LATEX_HEADER:   linkcolor=black
#+LATEX_HEADER: }

#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+MACRO: fixme *FIXME*: /$1/

The Cowbells package started as a green-field Geant4-based simulation
of the cosmic-ray test stand constructed for research and development
on water-based liquid scintilator at Brookhaven National Laboratory.
It was extended to handle the configuration used for beam tests at the
NASA Space Radiation Lab at BNL and then made general enough to
support any, with some small development, novel detector
configurations.


* Installation

Cowbells is available from https://github.com/brettviren/cowbells.

** Prereq

Cmake, HepMC, Geant4, ROOT and a recent Python are needed.  

*** Grinst

The =grinst= project can be used to pre-build the necessary code:

  https://github.com/brettviren/grinst

Clone the repository and edit the =g4root.grinst= file to set the
target build and installation areas then do:

#+BEGIN_EXAMPLE
./grinst.sh g4root.grinst install all
#+END_EXAMPLE

To setup the environment for building and running cowbells do

#+BEGIN_EXAMPLE
eval $(./grinst.sh cowbells.grinst setup all)
#+END_EXAMPLE

** Build Cowbells

Cowbells is built with cmake.

It needs to be told where to find the major package dependencies.
This example assumes they have been built with =grinst= and the
environment has been setup as above.

#+BEGIN_EXAMPLE
cd /path/to/build/area/
cmake -DHEPMC_DIR=$hepmc_install_dir /path/to/source_dir
make 
#+END_EXAMPLE


* Configuration 

The simulation is configured through the command line and by one or
more configuration files written in JSON[fn:json] format.  These files
can be written by any means but a suite of modules are provided by the
=cowbells= Python package to make generating them easier.

At top-level, the file schema is that of a single (anonymous) JSON
dictionary.  Each item of the dictionary has a key that determines the
schema of the item and how the item's data is used by cowbells.
Multiple files can be given on the command line.  If any section is
found in more than one file the ordering of the files determine which
section is used.  The first one found "wins".

Next, an overview of how to use the =cowbells= Python modules to make
produce configuration files is given.  Following that is a description
of each configuration section.

[fn:json] http://www.json.org/

** Python configuration modules

The Python modules are used to build up a description of the detector
geometry in memory in an organized and reusable fashion and to persist
this description to the JSON configuration files.  

*** =cowbells.geom= 

The =cowbells.geom= module provides a submodule for each configuration
section related to geometry.  It contains submodules and their classes
for materials, optical surfaces and properties and sensitive
detectors.  These classes implement a very similar interface and
naming convention as used by the Geant4 geometry model.  The
similarity is not complete but intends to cover the more commonly used
aspects.

Most of the classes implement the method =.pod()= which will emit a
"plain old data" (/pod/) structure that represents how the instance
has been configured.  These /pod/ structures can be aggregated and
finally fed to Python's =json= module in order to produce the JSON
configuration files.  These two tasks are handled by the next module
described.

Each of the =geom.*= submodule maintains a =store= data member which
collects every instance of its classes that are created.  All stores
can be dumped to a JSON file with code like:

#+BEGIN_SRC Python
from cowbells import geom
# ... populate the geometry
fp = open("somefile.json", "w")
fp.write(geom.dumps_json())
fp.close()
#+END_SRC

It is in this manner that most applications that produce configuration
code are expected to operate.

*** =cowbells.builder=

The =cowbells.builder== module defines and implements several
=Builder= classes.  Instances of these create aggregate descriptions
based on input parameters of some major element of a detector
description.

The interface to a Builder is defined in the =Builder= base class and
is expected to be called by a top-level script or by a Builder that
aggregates other (finer grained) builders.  Using a builder proceeds
in three parts:

 - creating :: all builder constructors may take keyword parameters
               that modify their default behavior.

 - building :: a top-level logical volume and all that it encompasses.

 - placing :: the top logical volume must be placed in some parent
              volume by the caller.  

*** =cowbells.default= 

The =cowbells.default= module provides pre-defined instances of some
=cowbells.geom= classes.  These modules are used by calling special
functions which will populate the geometry with whatever objects they
define.  The supported functions are:

 - =optical()= :: define optical material properties.  An optional
                  material name may be given.


** Configuration sections for geometry

The configuration sections are described briefly.  The provided
[[./tests/test_geom.py][test_geom.py]] gives examples of the Python code needed.  By running it
the file =test_geom.json= will be produced giving an example of a JSON
configuration file.

 - =elements= :: list of elementary atoms

 - =materials= :: list of aggregations of elements or other materials

 - =shapes= :: list of shapes used for creating volumes

 - =volumes= :: list of logical volumes each bringing together a shape and a material

 - =placements= :: list of physical volumes each bringing together
                   daughter and mother (unless its a world placement)
                   volumes and a transformation between them

 - =optical= :: list of optical properties associated with a named material

 - =surfaces= :: list of optical surfaces

 - =sensitive= :: list of sensitive detectors each associating a
                  (Geant4 sensitive detector) class with a logical
                  volume and a set of touchables.


*** Sensitive detectors

Ultimately sensitive detectors are implemented by Geant4 C++ classes
provided by cowbells.  They record hits that occur in one or more
placements of a given logical volume in to a named hit collection.  In
order to assign in which placement a hit occurred the sensitive
detectors must be given a list of /touchables/.  Each touchable is
written as a path of placements from the world placement down to the
placement of the sensitive volume.  For example, the tub detector's
photocathode touchable may look like:

#+BEGIN_EXAMPLE
"pvWorld:0/pvWaterSample:0/pvAcrylicTubWindow:0/pvBialkaliPhotoCathode:0", 
#+END_EXAMPLE


** Non-geometry configuration

In addition to describing the geometry, JSON configuration files can
describe these aspects:

 - =physics= :: what physics to simulate

 - =kinematics= :: how to produce the initial particle kinematics

*** Physics

The types of physics is simulate is specified by listing their code
names in the =physics= section:

#+BEGIN_SRC JSON
{ "physics" : { "list" : ["em","op"] } }
#+END_SRC

The supported codes are:

 - =em= :: electromagnetic processes
 - =op= :: optical processes
 - =had= :: hadronic processes


*** Kinematics

The initial kinematics are specified by "type".  Depending on the type
the rest of the configuration is interpreted.  For example the usual
particle "gun" is implemented and configured as in this example:

#+BEGIN_SRC JSON 
{ "kinematics" : {
        "type" : "gun",         "count" : 1,
        "particle": "proton",   "energy": "500*MeV"
        "vertex": [0.0, 0.0, "-5.1*meter"],
        "direction": [0.0, 0.0, 1.0]               }}
#+END_SRC



** Command line

The main command line program produced by the Cowbells package is
=cowbells.exe=.  Running it with no arguments produces a brief help
message.

#+BEGIN_EXAMPLE
Usage: cowbells [options]

Options:
  --help                     Print usages and exit
  --output, -o <outputfile>  Set output filename
  --interface, -u <interface>Set the user interface
  --kinematics, -k <kindesc> Set the kinematics descriptor
  --physics, -p <physics,list>Set the physics list
  --nevents, -n <#events>    Set the number of events to generate
#+END_EXAMPLE

Some options, in particular the kinematics and physics, may be set in
configuration files as well.

*** User interface

{{{fixme(This is a work in progress.)}}}

Set Geant4 UI.  

*** Kinematics

{{{fixme(This feature is not complete.)}}}  

The command line can override kinematics that may be otherwise set in
a configuration file.  They are specified in the form of a URL, for
example:

#+BEGIN_EXAMPLE
cowbells.exe --kinematics \
  'kin://beam?vertex=0,0,0&name=proton&direction=1,0,0&energy=500'
#+END_EXAMPLE

Note, you will likely need to protect the characters =?= and =&= from
your shell by encasing the option in quotes.


*** Physics List

The command line can override any physics list that is otherwise
provided in configuration files. For example with:

#+BEGIN_EXAMPLE
cowbells.exe --physics em,op,had [...]
#+END_EXAMPLE


** Geant4 macros

Geant4 macro files can also be given on the =cowbells.exe= command
line.  For example, a =HepRepFile= can be produced to display the
geometry and events in HepRApp[fn:heprapp] using a macro file like:

#+BEGIN_EXAMPLE
/vis/open HepRepFile 
/vis/drawVolume
/vis/scene/add/axes            0 0 0 100 mm
/vis/viewer/flush
/vis/scene/add/axes            0 0 0 100 mm
/vis/scene/add/trajectories rich
/vis/modeling/trajectories/create/drawByParticleID
/vis/modeling/trajectories/drawByParticleID-0/set e- blue
/vis/modeling/trajectories/drawByParticleID-0/set e+ cyan
/vis/modeling/trajectories/drawByParticleID-0/set proton red
/vis/modeling/trajectories/drawByParticleID-0/set neutron green
/vis/modeling/trajectories/drawByParticleID-0/set opticalphoton white
/run/beamOn 1
#+END_EXAMPLE

and a command line like:

#+BEGIN_EXAMPLE
cowbells.exe -o td.root opts.json td.json heprepvis.mac
java -jar /path/to/HepRApp.jar G4Data0.heprep
#+END_EXAMPLE

[fn:heprapp] http://www.slac.stanford.edu/BFROOT/www/Computing/Graphics/Wired/


* Examples

** Isolated tub detector

The "tub" detector is a simple cylinder with a window in the lid that
holds a thin photocathode sensitive detector.  The =gentubdet.py=
script in the =share/= directory will generate geometry configuration
for it.  The sample and tub material and the tub lining color can be
specified.  The if the file is not given the JSON text is sent to
stdout.

#+BEGIN_EXAMPLE
gentubdet.py [-h] [-s SAMPLE] [-t TUB] [-c COLOR] file
#+END_EXAMPLE

Placing the above =physics= and =kinematics= into a file =opts.json= one example is:

#+BEGIN_EXAMPLE
gentubdet.py -s Water -t Aluminum -c black td.json
cowbells.exe -n 10 -o td.root opts.json td.json
#+END_EXAMPLE

** NSRL setup with tub detectors

The first run at NSRL with tub detectors consisted of these elements
in the beam line:

#+BEGIN_EXAMPLE
|     (o)  -   []  -   []  - 
W      V   H1  T1  H2  T2  H3
#+END_EXAMPLE

 - =W= :: beam window
 - =V= :: hole-veto counter
 - =Hn= :: hodoscope trigger counter #n
 - =Tn= :: tub detector #n

{{{fixme(Hole-veto not yet implemented.)}}}


The elements are rotated so that the beam runs along the Z-axis.  The
center of the first tub detector is the global origin.  To generate
this geometry configuration file the =gennsrl.py= script is used.

#+BEGIN_EXAMPLE
gennsrl.py file
cowbells.exe \
  -k 'kin://beam?vertex=0,0,-510&name=proton&direction=0,0,1&energy=500' \
  -p em,op -n 10 -o nsrl.root nsrl.json
#+END_EXAMPLE

{{{fixme(No command line hooks yet exist to change the sample material.)}}} 


